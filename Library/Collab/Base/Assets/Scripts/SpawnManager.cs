using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public enum Lane {l_m9 = -9, l_m8 = -8, l_m7 = -7, l_m6 = -6, l_m5 = -5, l_m4 = -4, l_m3 = -3, l_m2 = -2, l_m1 = -1, l0 = 0, l1 = 1, l2 = 2, l3 = 3, l4 = 4, l5 = 5, l6 = 6, l7 = 7, l8 = 8, l9 = 9, L_RANDOM = 0 }
public class SpawnManager : MonoBehaviour {

    public GameObject[] enemyPrefabs;
    //private int[] lanes = new int[] { -9, -8, -7, -6, -5, -4, -3, -2 -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    //private List<int> occupiedLanes = new List<int>();
    //private float spawnRate = 0f;
    private float waveTimer = 0f;
    private float spawnTimer = 0f;
    public float waveStart = 4f;
    public float waveEnd = 16f;
    public float waveLoop = 20f;
    public float waveSpeed = 2f;
    private int enemyCounter = 0;
    public Wave[] waves;
    public Wave currentWave;
    private int waveCounter = 0;

    // Dor Added
    private int _rand;
    //

    void Start()
    {
        currentWave = waves[waveCounter];
        StartCoroutine(AutoSpawn());
        _rand = Random.Range((int)Lane.l_m9, (int)Lane.l9);
    }

    void OnDestroy()
    {
        foreach (Wave w in waves)
        {
            w.currentSpawn = 0;
        }
    }


    IEnumerator AutoSpawn()
    {
        //yield return null;
        while (true)
        {
            //yield return new WaitForEndOfFrame();

            while (waveTimer >= currentWave.waveStart && waveTimer < currentWave.waveEnd)
            {
                //Debug.Log("inner loop: " + waveTimer);
                //spawnRate = Mathf.Abs(Mathf.Sin(spawnTimer/waveSpeed));
                //int timer = (int)waveTimer;
                if (currentWave.currentSpawn < currentWave.spawns.Length && waveTimer >= currentWave.spawns[currentWave.currentSpawn].spawnTime)
                {
                    Spawn(currentWave.spawns[currentWave.currentSpawn].lane, currentWave.spawns[currentWave.currentSpawn].enemyToSpawn);
                    currentWave.currentSpawn++;
                }

                spawnTimer += Time.deltaTime;
                waveTimer += Time.deltaTime;
                yield return new WaitForEndOfFrame();
                
            }
            if (waveTimer > currentWave.waveLoop)
            {

                currentWave.currentSpawn = 0;
                waveTimer = 0f;
                spawnTimer = 0f;
                enemyCounter = 0;
                if (waveCounter < waves.Length - 1)
                {
                    AutoGeneratedSpawn(waves[waveCounter+1]);
                    currentWave = waves[++waveCounter];
                    Debug.Log(currentWave.name);
                }


            }
            
            waveTimer += Time.deltaTime;
            //Debug.Log("outer loop: " +waveTimer);
            yield return new WaitForEndOfFrame();


        }
    }
	public void Spawn(Lane l, EnemyType et)
    {
        //Dor Added
        _rand = Random.Range((int)Lane.l_m9, (int)Lane.l9);
        //

        int enemyIndex = (int)et;
        int lane = (int)l;

        // Dor Added
        if (l == Lane.L_RANDOM)
        {
            lane = _rand;
        }
        //

        Vector3 pos = new Vector3(8f, 2f, lane);
        Quaternion rot = Quaternion.identity;
        //if (et.Equals(EnemyType.Flying))
            //rot = Quaternion.Euler(90f, -90f, 0f);
        GameObject newEnemy = Instantiate(enemyPrefabs[enemyIndex], pos, rot);
        newEnemy.GetComponent<Enemy>().Init();
        enemyCounter++;
    }

    public void AutoGeneratedSpawn(bool toAvtivate)
    {
        if (!toAvtivate)
        {
            return;
        }

        currentWave.spawns = null;
        currentWave.spawns = new Spawn[currentWave.NumOfFlying + currentWave.NumOfInfantry + currentWave.NumOfRange];

        var randoms = new List<float>();

        foreach (var Spawn in currentWave.spawns)
        {
            randoms.Add(Random.Range(0, currentWave.waveLoop));
        }

        randoms.Sort();

        var i = 0;

        for (int j = 0; j < currentWave.NumOfFlying; j++)
        {
            currentWave.spawns[j].lane = Lane.L_RANDOM;
            currentWave.spawns[j].enemyToSpawn = EnemyType.Flying;
            currentWave.spawns[j].spawnTime = randoms[i];
            i++;
        }
        for (int k = currentWave.NumOfFlying; k < currentWave.NumOfInfantry + currentWave.NumOfFlying; k++)
        {
            currentWave.spawns[k].lane = Lane.L_RANDOM;
            currentWave.spawns[k].enemyToSpawn = EnemyType.Infantry;
            currentWave.spawns[k].spawnTime = randoms[i];
            i++;
        }
        for (int l = currentWave.NumOfInfantry + currentWave.NumOfFlying; l < currentWave.NumOfRange + currentWave.NumOfInfantry + currentWave.NumOfFlying; l++)
        {
            currentWave.spawns[l].lane = Lane.L_RANDOM;
            currentWave.spawns[l].enemyToSpawn = EnemyType.Range;
            currentWave.spawns[l].spawnTime = randoms[i];
            i++;
        }
    }
}
